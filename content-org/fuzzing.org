#+hugo_base_dir: ../
#+HUGO_CUSTOM_FRONT_MATTER: :author "Konstantin BÃ¼cheler"
#+HUGO_PAIRED_SHORTCODES: admonition
* DONE Fuzzing Wazuh for Fun, Credits and Profit(?) 1/3
CLOSED: [2023-10-27 Fri 14:30]
:PROPERTIES:
:EXPORT_FILE_NAME: libafl_fuzzing_part1
:END:
#+filetags: pwn, fuzzing
#+OPTIONS: toc:2
https://x.com/hgarrereyn/status/1718740453439185277?s=20
*** Intro
**** Uni project
**** LibAFL
**** Target criteria
*** Short Intro to fuzzing
Fuzzing, or fuzz testing, is a widely used technique in software testing and vulnerability research.
The main concept behind fuzzing is to repeatedly execute a target with changing inputs, while monitoring for crashes.
Inputs that result in a crash are likely to trigger a bug within the target application. This information could potentially
lead to the discovery of a vulnerability, depending on the nature of the bug.
#+caption: Feedback Fuzzing
#+name: fig__feedback_fuzzing
[[/images/feedback_fuzzing.png]]
*** LibAFL
Why? How? When?
*** Target Introduction
Describe wazuh
*** Target Specific Challenges
Complex State, Multithreading, Chroot, Complex message format

* TODO Fuzzing Wazuh for Fun, Credits and Profit(?) 2/3
:PROPERTIES:
:EXPORT_FILE_NAME: libafl_fuzzing_part2
:END:
#+filetags: pwn, fuzzing
#+OPTIONS: toc:2
*** Initial Approach
Target function, grammar based input generator, target patches, qemu
*** Adding Coverage
DrCov, bugs in rangemap, bug in lighthouse
*** Check if this was not so bad after all
ASAN should work :/
How does this approach perform with cmplog + ASAN

* TODO Fuzzing Wazuh for Fun, Credits and Profit(?) 3/3
:PROPERTIES:
:EXPORT_FILE_NAME: libafl_fuzzing_part3
:END:
#+filetags: pwn, fuzzing
#+OPTIONS: toc:2
*** Target narrower function
*** Introducing ASAN and CmpLog
*** Describe found bugs

